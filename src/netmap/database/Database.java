/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package netmap.database;

import java.sql.Connection;
import java.sql.DriverManager;
import netmap.util.Util;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Manage the database connection
 * @author Darlan
 */
public class Database implements AutoCloseable
{
    private static Database instance;
    private static int calls;
    
    /**
     * Get the current instance of the Database Class
     * @return 
     */
    public static Database getInstance()
    {
        if (instance == null)
        {
            instance = new Database();
        }
        
        calls++;
        instance.prepareConnection();
        return instance;
    }

    private Connection conn;
    
    private Database()
    {
        try
        {
//            Class.forName("com.mysql.jdbc.Driver");
//            Class.forName("org.postgresql.Driver");
        }
        catch (Exception e)
        {
            Util.handleException(e);
        }
    }
    
    private void prepareConnection()
    {
        try
        {
            if (conn == null || conn.isClosed())
            {
//                conn = DriverManager.getConnection("jdbc:mysql://denuro.com:3306/netmap", "darlan", "");
//                conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/netmap", "postgres", "123456");
            }
        }
        catch (Exception e)
        {
            Util.handleException(e);
        }
    }
    
    /**
     * Get a new PreparedStatement class for this connection
     * @param sql
     * @return
     * @throws SQLException 
     */
    public PreparedStatement prepareStatement(String sql) throws SQLException
    {
        return conn.prepareStatement(sql);
    }
    
    /**
     * Get a new PreparedStatement class for this connection
     * @param sql
     * @param autoGeneratedKeys
     * @return
     * @throws SQLException 
     */
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException
    {
        return conn.prepareStatement(sql, autoGeneratedKeys);
    }
    
    @Override
    /**
     * Close the connection
     */
    public void close()
    {
        calls--;
        
        if (calls == 0)
        {
            try
            {
                conn.close();
            }
            catch (Exception e)
            {
                Util.handleException(e);
            }
        }
    }

}
